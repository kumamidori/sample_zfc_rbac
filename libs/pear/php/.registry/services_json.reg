a:22:{s:7:"attribs";a:6:{s:15:"packagerversion";s:5:"1.9.1";s:7:"version";s:3:"2.0";s:5:"xmlns";s:35:"http://pear.php.net/dtd/package-2.0";s:11:"xmlns:tasks";s:33:"http://pear.php.net/dtd/tasks-1.0";s:9:"xmlns:xsi";s:41:"http://www.w3.org/2001/XMLSchema-instance";s:18:"xsi:schemaLocation";s:147:"http://pear.php.net/dtd/tasks-1.0 http://pear.php.net/dtd/tasks-1.0.xsd http://pear.php.net/dtd/package-2.0 http://pear.php.net/dtd/package-2.0.xsd";}s:4:"name";s:13:"Services_JSON";s:7:"channel";s:12:"pear.php.net";s:7:"summary";s:39:"PHP implementaion of json_encode/decode";s:11:"description";s:1095:"JSON (JavaScript Object Notation, http://json.org) is a lightweight data-interchange format. 
    It is easy for humans to read and write. It is easy for machines to parse and generate. 
    It is based on a subset of the JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999. 
    This feature can also be found in Python. JSON is a text format that is completely language independent 
    but uses conventions that are familiar to programmers of the C-family of languages, including
     C, C++, C#, Java, JavaScript, Perl, TCL, and many others. These properties make JSON an ideal
     data-interchange language.

    This package provides a simple encoder and decoder for JSON notation. It is intended for use
     with client-side Javascript applications that make use of HTTPRequest to perform server 
    communication functions - data can be encoded into JSON notation for use in a client-side
     javascript, or decoded from incoming Javascript requests. JSON format is native to Javascript, 
    and can be directly eval()'ed with no further parsing overhead.";s:4:"lead";a:2:{i:0;a:4:{s:4:"name";s:15:"Michal Migurski";s:4:"user";s:8:"migurski";s:5:"email";s:16:"migurski@php.net";s:6:"active";s:3:"yes";}i:1;a:4:{s:4:"name";s:12:"Alan Knowles";s:4:"user";s:6:"alan_k";s:5:"email";s:17:"alan@akbkhome.com";s:6:"active";s:3:"yes";}}s:4:"date";s:10:"2011-01-14";s:4:"time";s:8:"10:40:48";s:7:"version";a:2:{s:7:"release";s:5:"1.0.3";s:3:"api";s:5:"1.0.0";}s:9:"stability";a:2:{s:7:"release";s:6:"stable";s:3:"api";s:6:"stable";}s:7:"license";s:3:"BSD";s:5:"notes";s:596:"Minor feature / bugfix release

#18018 - toJSON() support (classes can now implement toJSON(), which should return  
#17921 - long strings cause problems for parser
#17515 - handle mbstring overloading of strlen 
------ - cache lookups for mb functions during constructor

toJSON notes:
$ser = new Services_JSON( SERVICES_JSON_USE_TO_JSON );

class A {
     // toJSON should return an associtive array of the properties to serialize
     // same standard as JSON.stringify()
     function toJSON() {
             return array( 'a' => $this->a, 'b'=>$this->b) ;
     }
}
echo $sj->encode(new A());";s:8:"contents";a:1:{s:3:"dir";a:2:{s:7:"attribs";a:1:{s:4:"name";s:1:"/";}s:4:"file";a:1:{s:7:"attribs";a:4:{s:14:"baseinstalldir";s:8:"Services";s:6:"md5sum";s:32:"cc3e15c81a894f677757b648200b0085";s:4:"name";s:8:"JSON.php";s:4:"role";s:3:"php";}}}}s:12:"dependencies";a:1:{s:8:"required";a:2:{s:3:"php";a:1:{s:3:"min";s:3:"4.3";}s:13:"pearinstaller";a:1:{s:3:"min";s:7:"1.4.0b1";}}}s:10:"phprelease";s:0:"";s:9:"changelog";a:1:{s:7:"release";a:4:{i:0;a:5:{s:4:"date";s:10:"2009-01-02";s:7:"version";a:2:{s:7:"release";s:5:"1.0.2";s:3:"api";s:5:"1.0.0";}s:9:"stability";a:2:{s:7:"release";s:6:"stable";s:3:"api";s:6:"stable";}s:7:"license";s:3:"BSD";s:5:"notes";s:117:"Fixed Bug #16908 - When locale was set, and it changed the way numbers are formated, the output for floats was broken";}i:1;a:5:{s:4:"date";s:10:"2009-05-23";s:7:"version";a:2:{s:7:"release";s:5:"1.0.1";s:3:"api";s:5:"1.0.0";}s:9:"stability";a:2:{s:7:"release";s:6:"stable";s:3:"api";s:6:"stable";}s:7:"license";s:3:"BSD";s:5:"notes";s:110:"Fixed Bug #16585 - Fix correct mime type for encode() - note use encodeUnsafe() to prevent headers being sent.";}i:2;a:5:{s:4:"date";s:10:"2009-05-23";s:7:"version";a:2:{s:7:"release";s:5:"1.0.0";s:3:"api";s:5:"1.0.0";}s:9:"stability";a:2:{s:7:"release";s:6:"stable";s:3:"api";s:6:"stable";}s:7:"license";s:3:"BSD";s:5:"notes";s:66:"Fixed Bug #16251 - Back out change - Use double quotes as per spec";}i:3;a:5:{s:4:"date";s:10:"2009-03-13";s:7:"version";a:2:{s:7:"release";s:5:"0.9.0";s:3:"api";s:5:"0.9.0";}s:9:"stability";a:2:{s:7:"release";s:4:"beta";s:3:"api";s:4:"beta";}s:7:"license";s:3:"BSD";s:5:"notes";s:197:"Released into pear with minor changes to original proposal
  - encode() - encodes and adds http headers
  - encodeUnsafe() - encodes only
  - Some UTF8 fixes (better handling of invalid characters)";}}}s:8:"filelist";a:1:{s:8:"JSON.php";a:5:{s:14:"baseinstalldir";s:8:"Services";s:6:"md5sum";s:32:"cc3e15c81a894f677757b648200b0085";s:4:"name";s:8:"JSON.php";s:4:"role";s:3:"php";s:12:"installed_as";s:51:"/var/www/auth.local/libs/pear/php/Services/JSON.php";}}s:12:"_lastversion";N;s:7:"dirtree";a:1:{s:42:"/var/www/auth.local/libs/pear/php/Services";b:1;}s:3:"old";a:7:{s:7:"version";s:5:"1.0.3";s:12:"release_date";s:10:"2011-01-14";s:13:"release_state";s:6:"stable";s:15:"release_license";s:3:"BSD";s:13:"release_notes";s:596:"Minor feature / bugfix release

#18018 - toJSON() support (classes can now implement toJSON(), which should return  
#17921 - long strings cause problems for parser
#17515 - handle mbstring overloading of strlen 
------ - cache lookups for mb functions during constructor

toJSON notes:
$ser = new Services_JSON( SERVICES_JSON_USE_TO_JSON );

class A {
     // toJSON should return an associtive array of the properties to serialize
     // same standard as JSON.stringify()
     function toJSON() {
             return array( 'a' => $this->a, 'b'=>$this->b) ;
     }
}
echo $sj->encode(new A());";s:12:"release_deps";a:2:{i:0;a:4:{s:4:"type";s:3:"php";s:3:"rel";s:2:"ge";s:7:"version";s:3:"4.3";s:8:"optional";s:2:"no";}i:1;a:6:{s:4:"type";s:3:"pkg";s:7:"channel";s:12:"pear.php.net";s:4:"name";s:4:"PEAR";s:3:"rel";s:2:"ge";s:7:"version";s:7:"1.4.0b1";s:8:"optional";s:2:"no";}}s:11:"maintainers";a:2:{i:0;a:5:{s:4:"name";s:15:"Michal Migurski";s:5:"email";s:16:"migurski@php.net";s:6:"active";s:3:"yes";s:6:"handle";s:8:"migurski";s:4:"role";s:4:"lead";}i:1;a:5:{s:4:"name";s:12:"Alan Knowles";s:5:"email";s:17:"alan@akbkhome.com";s:6:"active";s:3:"yes";s:6:"handle";s:6:"alan_k";s:4:"role";s:4:"lead";}}}s:10:"xsdversion";s:3:"2.0";s:13:"_lastmodified";i:1368523426;}